# Задача 1. Корабли
#
# Даны два класса кораблей — грузовой и военный. У каждого из этих кораблей есть своя модель,
# и каждый может сделать два действия: сообщить свою модель и идти по воде.
#
# Грузовой корабль имеет такой атрибут, как заполненность, изначально он равен нулю.
# У него есть ещё два действия: погрузить и выгрузить груз с корабля.
#
# У военного же корабля нет никаких грузов, есть только оружие, которое передаётся вместе с моделью.
# Также, вместо погрузки и выгрузки, у него есть другое действие — атаковать.
#
# Реализуйте классы грузового и военного кораблей.
# Для этого выделите общие атрибуты и методы в отдельный класс «Корабль» и используйте наследование.
# Не забудьте про функцию super в дочерних классах.
#
#
#

class Ship:

    def __init__(self, model="корабль"):
        self.model = model

    def __str__(self):
        return self.model

    def sail(self):
        print(f"{self.model} идёт по воде!")


class WarShip(Ship):

    def __init__(self, weapon, model="военный корабль"):
        super().__init__(model)
        self.weapon = weapon

    def attack(self):
        print(f"{self} делает пиу-пиу!")


class CargoShip(Ship):

    def __init__(self, model="грузовой корабль"):
        super().__init__(model)
        self.fullness = 0

    def loading(self, value):
        self.fullness += value

    def unloading(self, value):
        self.fullness -= value


# Задача 2. Роботы
#
# На военную базу завезли несколько интересных моделей роботов, которые похожи между собой, но имеют немного разные функции.
# У каждого робота есть номер модели и действие operate, которое означает, что делает робот. Особенности роботов следующие:
#
# У робота-пылесоса есть мешок для мусора, изначально он пустой (0). При команде operate робот сообщает,
# что он пылесосит пол, и выводит текущую заполняемость мешка.
# У военного робота есть оружие, и при команде operate он выводит сообщение о защите военного объекта с помощью этого оружия.
# Ещё есть робот — подводная лодка, который также является военным. У этого робота есть значение глубины,
# и при команде operate он делает то же, что и военный робот, плюс сообщает, что охрана ведётся под водой.
#
# Напишите программу, которая реализует все необходимые классы роботов.
#
#
#

class Robot:

    def __init__(self, model):
        self.model = model

    def __str__(self):
        return '{} model {}'.format(self.__class__.__name__, self.model)

    def operate(self):
        print('Робот ездит по кругу')


class WarRobot(Robot):

    def __init__(self, gun, model):
        super().__init__(model)
        self.gun = gun

    def operate(self):
        print(f'Робот охраняет военный обьект при помощи {self.gun}')


class VacuumCleaningRobot(Robot):

    def __init__(self, model):
        super().__init__(model)
        self.garbage_bag = 0

    def operate(self):
        print('Робот пылесосит пол')


class SubmarineRobot(WarRobot):

    def __init__(self, gun, model, depth):
        super().__init__(gun, model)
        self.depth = depth

    def operate(self):
        super().operate()
        print('Охрана ведется под водой на глубине', self.depth)


# Задача 3. Кастомные исключения
#
# Исключения в Python также являются классами, и все они берут свои истоки от самого главного класса — Exception.
# И для создания своего собственного класса ошибки достаточно написать его дочерний класс. Например:
#
#
#
# class MyOwnException(Exception):
#
#     pass
#
#
#
# raise MyOwnException('Это моя ошибка!')
#
#
#
# Причём содержимое объекта исключения чаще всего так и оставляют (просто pass), чтобы не сломать автоматические обработчики исключений.
#
# Напишите программу, которая считывает из файла numbers.txt пары чисел, делит первое число на второе и выводит ответ на экран.
# Если первое число меньше второго, то программа выдаёт исключение DivisionError (нельзя делить большее на меньшее).
#
# Дополнительно, с помощью try except, можно обработать исключение на своё усмотрение.

class DivisionError(Exception):
    pass


with open("numbers.txt", "r", encoding="utf8") as file:
    for line in file:
        try:
            clear_line = line.rstrip()
            first, second = clear_line.split()
            if int(first) < int(second):
                raise DivisionError("нельзя делить большее на меньшее")
        except (ValueError, DivisionError) as exc:
            print(exc, type(exc), first, second)


